Feature: Making a POST request

Scenario: Sending a POST request
  Given I have the following payload:
    """
    {
      "name": "John Doe",
      "email": "johndoe@example.com"
    }
    """
  When I send a POST request to "https://api.example.com/users"
  Then the response status code should be 201
  And the response should contain "User created successfully"


const { Given, When, Then } = require('cucumber');
const axios = require('axios');

let payload;
let response;

Given('I have the following payload:', function (payloadString) {
  payload = JSON.parse(payloadString);
});

When('I send a POST request to {string}', async function (url) {
  response = await axios.post(url, payload);
});

Then('the response status code should be {int}', function (statusCode) {
  expect(response.status).to.equal(statusCode);
});

Then('the response should contain {string}', function (expectedText) {
  expect(response.data).to.include(expectedText);
});


"scripts": {
  "test": "cucumber-js"
}


function traverseJSON(obj) {
  for (let key in obj) {
    if (obj.hasOwnProperty(key)) {
      const value = obj[key];
      if (typeof value === 'object' && value !== null) {
        traverseJSON(value); // Recursively traverse nested object
      } else {
        console.log(`Key: ${key}, Value: ${value}`);
      }
    }
  }
}

const jsonObject = {
  key1: 'value1',
  key2: {
    nestedKey1: 'nestedValue1',
    nestedKey2: 'nestedValue2'
  },
  key3: 'value3'
};

traverseJSON(jsonObject);



















Feature: Making a GET request

Scenario: Sending a GET request
  Given I have the endpoint "https://api.example.com/users"
  When I send a GET request
  Then the response status code should be 200
  And the response should contain "John Doe"



const { Given, When, Then } = require('cucumber');
const axios = require('axios');

let endpoint;
let response;

Given('I have the endpoint {string}', function (url) {
  endpoint = url;
});

When('I send a GET request', async function () {
  response = await axios.get(endpoint);
});

Then('the response status code should be {int}', function (statusCode) {
  expect(response.status).to.equal(statusCode);
});

Then('the response should contain {string}', function (expectedText) {
  expect(response.data).to.include(expectedText);
});













const json = '{"fruits": ["apple", "banana", "orange"]}';
const data = JSON.parse(json);

// Using forEach()
data.fruits.forEach(fruit => {
  console.log(fruit);
});

// Using map()
const extractedFruits = data.fruits.map(fruit => fruit);
console.log(extractedFruits); // ["apple", "banana", "orange"]

// Using for...of loop
for (const fruit of data.fruits) {
  console.log(fruit);
}





const json = '{"fruits": ["apple", "banana", "orange"]}';
const data = JSON.parse(json);

const firstFruit = data.fruits[0]; // "apple"
const secondFruit = data.fruits[1]; // "banana"
