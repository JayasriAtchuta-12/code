Feature: Making a POST request

Scenario: Sending a POST request
  Given I have the following payload:
    """
    {
      "name": "John Doe",
      "email": "johndoe@example.com"
    }
    """
  When I send a POST request to "https://api.example.com/users"
  Then the response status code should be 201
  And the response should contain "User created successfully"


const { Given, When, Then } = require('cucumber');
const axios = require('axios');

let payload;
let response;

Given('I have the following payload:', function (payloadString) {
  payload = JSON.parse(payloadString);
});

When('I send a POST request to {string}', async function (url) {
  response = await axios.post(url, payload);
});

Then('the response status code should be {int}', function (statusCode) {
  expect(response.status).to.equal(statusCode);
});

Then('the response should contain {string}', function (expectedText) {
  expect(response.data).to.include(expectedText);
});


"scripts": {
  "test": "cucumber-js"
}





















Feature: Making a GET request

Scenario: Sending a GET request
  Given I have the endpoint "https://api.example.com/users"
  When I send a GET request
  Then the response status code should be 200
  And the response should contain "John Doe"



const { Given, When, Then } = require('cucumber');
const axios = require('axios');

let endpoint;
let response;

Given('I have the endpoint {string}', function (url) {
  endpoint = url;
});

When('I send a GET request', async function () {
  response = await axios.get(endpoint);
});

Then('the response status code should be {int}', function (statusCode) {
  expect(response.status).to.equal(statusCode);
});

Then('the response should contain {string}', function (expectedText) {
  expect(response.data).to.include(expectedText);
});













Feature: Create a new resource

Scenario: Create a new resource via POST
    Given I have a request payload with the following data:
        | name        | John Doe       |
        | email       | john@example.com |
        | address     | 123 Main St    |
        | city        | Anytown        |
        | postal_code | 12345          |
    When I send a POST request to "/api/resource"
    Then the response status code should be 201
    And the response should contain the property "id"
import { Given, When, Then } from 'cucumber';
import axios from 'axios';

Given('I have a request payload with the following data:', function (dataTable) {
  const payload = dataTable.hashes()[0];
  this.requestPayload = payload;
});

When('I send a POST request to {string}', async function (url) {
  const response = await axios.post(url, this.requestPayload);
  this.response = response;
});

Then('the response status code should be {int}', function (statusCode) {
  const actualStatusCode = this.response.status;
  expect(actualStatusCode).toBe(statusCode);
});

Then('the response should contain the property {string}', function (propertyName) {
  const responseData = this.response.data;
  expect(responseData.hasOwnProperty(propertyName)).toBe(true);
});

import { Given, When, Then } from 'cucumber';
import axios, { AxiosRequestConfig } from 'axios';

Given('I have a request payload with the following data:', function (dataTable) {
  const payload = dataTable.hashes()[0];
  this.requestPayload = payload;
});

Given('I have the following headers:', function (dataTable) {
  const headers = dataTable.hashes()[0];
  this.requestHeaders = headers;
});

When('I send a POST request to {string}', async function (url) {
  const config: AxiosRequestConfig = {
    headers: this.requestHeaders
  };
  const response = await axios.post(url, this.requestPayload, config);
  this.response = response;
});

Then('the response status code should be {int}', function (statusCode) {
  const actualStatusCode = this.response.status;
  expect(actualStatusCode).toBe(statusCode);
});

Then('the response should contain the property {string}', function (propertyName) {
  const responseData = this.response.data;
  expect(responseData.hasOwnProperty(propertyName)).toBe(true);
});


const { Given, When, Then } = require('cucumber');
const { chromium } = require('playwright');
const readline = require('readline');

let payloadData;
let responseStatus;

Given('I have the user registration payload', async function () {
  // Generate unique dynamic payload values
  const username = generateUniqueUsername();
  const email = generateUniqueEmail();
  const password = generatePassword();

  // Create payload object with unique values
  const payload = {
    username,
    email,
    password
  };

  payloadData = JSON.stringify(payload);
});

When('I make a POST request to the registration endpoint', async function () {
  const registrationUrl = 'https://api.example.com/register';

  const browser = await chromium.launch();
  const context = await browser.newContext();
  const page = await context.newPage();

  await page.route('**', (route) => {
    if (route.request().method() === 'POST' && route.request().url() === registrationUrl) {
      route.fulfill({
        status: responseStatus,
        contentType: 'application/json',
        body: JSON.stringify({ message: 'User registered successfully' }),
      });
    } else {
      route.continue();
    }
  });

  await page.goto(registrationUrl, { method: 'POST', body: payloadData });
  await browser.close();
});

// Rest of the step definitions...

// Helper functions to generate unique dynamic values
function generateUniqueUsername() {
  // Implement your logic here to generate a unique username
  // For example, you can append a timestamp or random number to the base username
  const baseUsername = 'user123';
  const timestamp = Date.now();
  return `${baseUsername}_${timestamp}`;
}

function generateUniqueEmail() {
  // Implement your logic here to generate a unique email
  // You can use a similar approach as the unique username
  const baseEmail = 'user123@example.com';
  const timestamp = Date.now();
  return `${timestamp}_${baseEmail}`;
}

function generatePassword() {
  // Implement your logic here to generate a dynamic password
  return 'password123';
}



























